00      // Read RAM[0] to A -- VGA initial colour
00
02      // Write from A to VGA colour address
B0  
00      // Read RAM[1] to A -- X address
01
54      // A+1 and save in A
02      // Write A to RAM[1] -- write X address to RAM[1]
01
01      // Read from RAM[5] to B -- X1
05
96      // If X is on X1 boarder, go to write VGA data (line 58 -- 3A)
3A
01      // Read from RAM[6] to B -- X2
06
96      // If X is on X2 boarder, go to write VGA data (line 58 -- 3A)
3A
01      // Read horizontal boader to B from RAM[02]
02
96      // If X is on horizontal boarder, go to reset X to 0 and Y++ (line 39 -- 27)
27
00      // Read from RAM[3] to A -- Y address
03
01	// Read from RAM[7] to B -- Y1
07
96      // If Y is on Y1 boarder, go to write VGA_DATA (line 58 -- 3A)
3A
01	// Read from RAM[8] to B -- Y2
08
96      // If Y is on Y2 boarder, go to write VGA_DATA (line 58 -- 3A)
3A
00      // Read from RAM[3] to A -- Y address
03
01      // Read vertical boarder to B from RAM[04]
04
96      // If Y is on vertical boarder, Goto IDLE
FF
07	// GOTO 04 and repeat
04
00      // Read RAM[9] to A -- reset X address to 0
09
02      // Write A to RAM[1] -- write X address to RAM[1]
01
01      // Read RAM[3] to B -- read Y address from RAM[3] to B
03
65      // b +1 and save in B
03	// Write B to RAM[3] -- write from B to RAM[3]
03
00	// Read from RAM[7] to A -- Y1
07
96      // If Y is on Y1 boarder, go to write VGA_DATA (line 58 -- 3A)
3A
00	// Read from RAM[8] to A -- Y2
08
96      // If Y is on Y2 boarder, go to write VGA_DATA (line 58 -- 3A)
3A
07	// GOTO line 31 and repeat
1F
00      // Read from RAM[1] to A -- X address
01      
01      // Read from RAM[3] to B -- Y address
03
02      // Write from A to B1 -- write X address to frame buffer
B1
03      // Write from B to B2 -- write Y address to frame buffer
B2  
07      // GOTO line 31 and repeat
1F
00	// split line
00	// Read colour RAM[0] to A
00	
54	// A+1 save in A
02	// write from A to 0xB0
B0
02	// write from A to RAM[0]
00	
07	// GOTO IDLE
FF


@FE
45
08
