00      // Read 4A (F0)(RAM[0]) to A -- VGA initial colour
4A
02      // Write from A to VGA colour address
B0
00      // Read from 4D to A -- Y address
4D
01      // Read vertical boarder to B from 78 (120)
78
96      // if Y on Y boundary, go to line 23 -- 17
17
01      // Read X1 32 (50) to B
32
02      // Write from A to VGA V_ADDR
B2
03      // Write from B to VGA H_ADDR
B1
02      // Write VGA_DATA as 1
B3
54      // A+1 and save in A
02      // write A to 4D
4D
07      // GOTO line 04
04
00      // Read 0 to A
00
02      // write 0 to Y
4D
00      // Read Y address to A
4D
01      // Read vertical boarder to B from 78 (120)
78
96      // if Y on y boundary, go to line 48 (30)
30
01      // Read 6E (120) to B
6E
02      // Write from A to VGA V_ADDR
B2
03      // Write from B to VGA H_ADDR
B1
01      // Read 1 to B
01
03      // Write 1 to VGA_DATA
B3
54      // A+1 and save in A
02      // Write A to Y address
4D
07      // GOTO line 27 and repeat
1B
00      // Read 0 into A
00      
02      // Write A(0) to Y address
4D
00      // Read from 4B (00) to A -- X address
4B
01      // Read h boarder to B from 4C (A0 -- 160)
4C
96      // if X on X boundary, go to line 73 (49)
49
01      // Read X1 28 (40) to B
28
02      // Write from A to VGA H_ADDR
B1
03      // Write from B to VGA V_ADDR
B2
01      // Read 1 to B
01
03      // Write 1 to VGA_DATA
B3
54      // A+1 and save in A
02      // Write A to X address
4B
07      // GOTO line 52 -- 34 and repeat
34
00      // Read 0 to A
00  
02      // Write 0 to X address to reset
4B
00      // Read from 4B (00) to A -- X address
4B
01      // Read h boarder to B from 4C (A0 -- 160)
4C
96      // if X on X boundary, go to line 98 (62)
62
01      // Read Y2 50 (80) to B
50
02      // Write from A to VGA H_ADDR
B1
03      // Write from B to VGA V_ADDR
B2
01      // Read 1 to B
01
03      // Write 1 to VGA_DATA
B3
54      // A+1 and save in A
02      // Write A to X address
4B
07      // GOTO line 77 -- 4D and repeat
4D
00      // Read 0 to A
00  
02      // Write 0 to X address to reset
4B
00      // Read Mouse X into A
A1
01      // Read Mouse Y into B
A2
02      // save current mouse X
7C
03      // save current mouse y
7D
02      // Write Mouse X into 7-Seg
D1
03      // Write Mouse Y into 7-Seg
D0
02      // Write Mouse X to VGA B1
B1
03      // Write Mouse Y to VGA B2
B2
02      // Write 1 to VGA DATA
B3
00      // Read last mouse X to A
7C
01      // Read 32 to B
32 
96      // if X on X1, do not reset
96
01      // Read 6E to B
6E 
96      // if X on X2, do not reset
96
00      // Read last mouse Y to A
7D
01      // Read 28 to B
28 
96      // if Y on Y1, do not reset
96
01      // Read 50 to B
50 
96      // if Y on Y2, do not reset
96
00      // Read last mouse X to A
7C
01      // Read last mouse Y to B
7D
02      // Write to VGA HADDR
B1
03      // Write to VGA
B2     
02      // Write 0 to VGA_DATA
B4
08
01  // DETECTION STUFF - Initial x-grid value
08
03  // Store 8 to 1A
1A
00  // Read x from mouse
A1
01  // Read first boundary 32 (50) to B
32
B6  // Branch to 5A (173 -- AD)  if less than 50
5A
01  // Read second x-grid to B
00
03  // Store 0 to 1A
1A
01  // Read second boundary 6E (110) to B
6E
B6  // Branch to 5A (173 -- AD) if less than 110
5A
01  // Read third x-grid to B
04
03  // Store 4 in 1A 
1A
01  // Read first y-grid value to B - ADDRESS 173 -- AD
01
03  // Store 1 in 2A
2A
00  // Read y from mouse
A2
01  // Read first boundary 28 (40) to B
28
B6  // Branch to 5B (195 -- C3) if less than 40
5B
01  // Read second y-grid value to B
00
03  // Store 0 in 2A
2A
01  // Read second boundary 50 (80) to B
50
B6  // Branch to 5B (195 -- C3) if less than 80
5B
01  // Read third y-grid value to B
02
03  // Store 2 in 2A
2A
00  // COMPARE - ADDRESS 195 -- C3 - Read 1A to A
1A
01  // Read 2A to B
2A
05  // Add together A and B, store in B
03  // Write to LEDS
C1
03  // Write to IR
90
07  // Branch to 66
66




@FE
97
66

